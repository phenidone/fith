
( ***************************************************
  PLC program to control a toilet light and fan.

  GPIO in:  bit 0 is a pushbuttom
  GPIO out: bit 0 is light
          : bit 1 is fan

  - press button to turn light on or off
  - hold button for >0.5s to turn fan on
  - light turns off after 10 minutes max
  - fan turns off 5 mins after light
  *************************************************** )

INCLUDE 5th/plc.5th

( prev GPIO state, for detecting rising/falling edge )
VARIABLE PREVINPUT
( when was the light turned on? )
VARIABLE LIGHTON
( when was the light turned off? )
VARIABLE LIGHTOFF
( when did the button-press start? )
VARIABLE PRESSDOWN
( output state we will use )
VARIABLE STATE

( port and bit definitions )
0 DEFINE INPORT
1 DEFINE BUTTON
0 DEFINE OUTPORT
1 DEFINE LIGHT
2 DEFINE FAN

( timing )
1000    DEFINE SLOWPERIOD
100     DEFINE FASTPERIOD
500     DEFINE LONGPRESS
5 ( 60 * ) DEFINE FANTIMEOUT
10 ( 60 * ) DEFINE LIGHTTIMEOUT

( set output bits )
: WRITEOUT
  STATE OUTPORT GPIO_WRITE
;


: ONTIMER 
  ( see if we're in a long press )
  PREVINPUT BUTTON &
  TIME_MSBOOT PRESSDOWN - LONGPRESS >
  AND IF
    STATE FAN | TO STATE
  ENDIF

  ( check for timeouts )
  STATE LIGHT & IF
    ( light is on, see if it needs to turn off )
    TIME_EPOCH LIGHTON - LIGHTTIMEOUT >
    IF
      TIME_EPOCH TO LIGHTOFF
      STATE LIGHT ^ TO STATE
    ENDIF
  ELSE
    STATE FAN & IF
      ( light is off and fan is on, see if it needs to turn off )
      TIME_EPOCH LIGHTOFF - FANTIMEOUT >
      IF
        STATE FAN ^ TO STATE
      ENDIF
    ENDIF
  ENDIF

  WRITEOUT
;

( set new timer speed )
( period -- )
: SETTIMER
  ' ONTIMER TIMER_PERIODIC DROP
;

( for GPIO change events )
: ONCHANGE
  INPORT GPIO_READ

  ( rising edge? )
  DUP PREVINPUT ~ & BUTTON &   
  IF
    TIME_MSBOOT TO PRESSDOWN      ( remember when press started )
    STATE LIGHT ^ DUP TO STATE    ( toggle light )

    LIGHT & IF
      TIME_EPOCH TO LIGHTON       ( remember when we turned it on/off )
    ELSE
      TIME_EPOCH TO LIGHTOFF
    ENDIF

    WRITEOUT
    ( faster timer events )
    FASTPERIOD SETTIMER
  ENDIF

  ( falling edge? )
  DUP ~ PREVINPUT & BUTTON &    
  IF
    ( slower timer events )
    SLOWPERIOD SETTIMER
  ENDIF
  TO PREVINPUT          ( save input state )  
;


( boot: initialise state and install event handlers )
: MAIN
  WRITEOUT  
  INPORT ' ONCHANGE GPIO_HANDLER DROP   ( install GPIO-change handler )
  SLOWPERIOD SETTIMER
;

( GC/save code to a binary )
DUMP
[FUNCPTR] MAIN GC
