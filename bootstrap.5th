
: TRUE 1 ;
: FALSE 0 ;
: NOT 0 = ;

: SPACE 32 ;
: CR 10 EMIT ;

: CHAR WORD 1 + @ 0xFF & ;
: [COMPILE] IMMEDIATE WORD FIND , ;
: LITERAL IMMEDIATE ' LIT , , ;
: TICK IMMEDIATE ' ' , , ;
: TICKCOMMA IMMEDIATE [COMPILE] TICK ' , , ;

: '(' [ CHAR ( ] LITERAL ;
: ')' [ CHAR ) ] LITERAL ;
: '"' [ CHAR " ] LITERAL ;

: BEGIN IMMEDIATE
  HERE C@
;

: UNTIL IMMEDIATE
  HERE C@ -
  ' JZ ,
  ,
;

: IF IMMEDIATE
  ' JZ ,
  HERE C@
  0 ,
;

: ENDIF IMMEDIATE
  DUP HERE C@
  SWAP - 1 +
  SWAP C!
;

: ELSE IMMEDIATE
  ' JMP ,
  HERE C@
  0 ,
  SWAP [COMPILE] ENDIF
;

: ( IMMEDIATE
  1
  BEGIN
    KEY
    DUP '(' = IF
      SWAP 1 + SWAP
    ENDIF
    ')' = IF
      1 -
    ENDIF
    DUP NOT
  UNTIL
  DROP
;

( ***************************************************
  the above consumes nested parenthetical comments
  by consuming input and tracking left/right parens
  in a counter until they balance.
  So now we can have comments in parens!
  
  The limitation is that the first opening paren must
  be a word unto itself because it must be discovered
  by WORD inside INTERPRET, in order to call the above.
  *************************************************** )

( ***************************************************
  Stack manipulation stuff
  *************************************************** )

( x y -- x y x )
: OVER 1 PICK ;
( x y -- y x y )
: TUCK DUP -ROT ;
( x y -- y )
: NIP SWAP DROP ;

( x y -- )
: 2DROP DROP DROP ;
( x y -- x y x y )
: 2DUP OVER OVER ;
( x y a b -- a b x y )
: 2SWAP 4 ROLL 4 ROLL ;

( ***************************************************
  Compiler: function primitives
  *************************************************** )

( hide the following word from the dictionary, INTERPRET won't see it )
( useful for burying inner functions we don't want published )
: HIDE IMMEDIATE
  WORD HIDDEN
;

( include a file )
: INCLUDE IMMEDIATE
  WORD _INCLUDE
  HIDE _INCLUDE
;

( insert call to the function we're compiling )
: RECURSE IMMEDIATE
  LATEST FIND 0x1FFFFFFF & ,
;

( insert jump (tail recursion) to the beginning of current function )
: TAIL IMMEDIATE
  LATEST FIND 0x1FFFFFFF &
  HERE C@ -                 ( compute offset )
  ' JMP ,
  ,                         ( compile jump )
;

( insert jump-IF-NONZERO to the beginning of current function )
: ?TAIL IMMEDIATE
  ' NOT ,                   ( invert TOS )
  LATEST FIND 0x1FFFFFFF &  ( recursion pointer, clear hidden/immed flags )
  HERE C@  -                ( compute offset )
  ' JZ ,
  ,                         ( compile jump )
;


( ***************************************************
  Heap allocator
  *************************************************** )

( allocate words on the heap and return pointer to first one )
( sz -- ptr )
: ALLOT
  HERE @ DUP    ( sz ptr ptr )
  ROT +         ( ptr ptr+sz )
  HERE !        ( ptr {*here=ptr+sz} )
;

( convert cell offset into byte offset )
: CELLS 2 << ;

( convert byte offset into cell offset )
: BYTES 2 >> ;

( round up to multiple of 4 (bytes -> cells) & divide by 4)
: ALIGNED
  3 + BYTES
;
( round up strlen, plus room for nul terminator, to a cell count )
: ALIGNEDZ
  4 + BYTES
;

( allot space for a named variable (1 word), and compile a word that produces
  its value )
: VARIABLE IMMEDIATE
  1 ALLOT     ( ptr )
  
  WORD HERE C@ CREATE  ( create function that returns the value )
  [COMPILE] LITERAL    ( pointer as literal )
  ' @ ,                ( dereference )
  ' EXIT ,
;

( overwrite a variable )
( value -- )
: TO IMMEDIATE
  WORD DUP FIND     ( val word addr )
  DUP -1 = IF
    DROP            ( val word )
    ( ." Unknown variable " TELL )
    DROP
  ELSE
    SWAP DROP       ( val addr )
    1 + C@          ( val dptr )

    STATE IF        ( compilation mode )
      [COMPILE] LITERAL
      ' ! ,
    ELSE            ( immediate mode )
      !             ( just write it )
    ENDIF
  ENDIF
;

( ***************************************************
  Compiler: flow control primitives
  *************************************************** )

( cond IF truepart [ ELSE falsepart ] ENDIF
  implements the usual selection construct )

( BEGIN body cond UNTIL
  implements do { body; } while(!cond); )

( BEGIN cond WHILE body LOOP
  implements while(cond){ body }
  because BEGIN was compiled first, we already have the
  loop target address on the stack )

( keep track of how many items, e.g. locals, loop variables, etc
  have been stashed on the return stack.  this allows us to generate
  correct RPICK calls to fetch locals etc within a loop, for example,
  and to unwind the return-stack properly at the end of a function )
VARIABLE _RSDEPTH
0 TO _RSDEPTH


( re-define function-definition code to zero _RSDEPTH )
: : 
  WORD HERE C@ CREATE
  LATEST HIDDEN
  0 TO _RSDEPTH
  ]
;

: WHILE IMMEDIATE
  ' JZ ,    ( compile conditional branch )
  HERE C@   ( target &offset )
  0 ,       ( offset=0 )
;

( end of a while-loop )
( target &off -- )
: LOOP IMMEDIATE
  HERE C@       ( target &offset &jmp )
  ' JMP ,       ( compile jmp )
  ROT SWAP -    ( &offset target-&jmp )
  ,             ( &offset )
  [COMPILE] ENDIF ( patch the while-condition )
;


( beginning of a definite (do/for) loop )
( we keep both the limit and the counter on
  the return stack at runtime.  It's compiled
  (just like in C) as a while loop, and we insert
  the initialisation, condition, continuation and
  termination code here )
( runtime: start limit -- )
: FOR IMMEDIATE
  ' >R DUP , ,  ( R: limit start )
  [COMPILE] BEGIN
    ' R> ,
    ' R@ ,      ( pos limit )
    ' OVER ,
    ' >R ,      ( restore pos to return-stack )
    ' < ,       ( condition: pos<limit )
  [COMPILE] WHILE
;


( end of a FOR loop.  Install the continuation (++pos)
  code, put the loop-end in, then compile cleanup )
: ROF IMMEDIATE
  ' R> ,            ( pos from retstack )
  1 [COMPILE] LITERAL ' + ,   ( pos+1 )
  ' >R ,            ( pos to retstack )
  [COMPILE] LOOP
  ' RDROP DUP , ,   ( pos, limit off retstack )
;


( end of a FOR loop with arbitrary +=
  code, put the loop-end in, then compile cleanup )
: +ROF IMMEDIATE
  ' R> ,            ( pos from retstack )
  ' + ,             ( pos+delta )
  ' >R ,            ( pos to retstack )
  [COMPILE] LOOP
  ' RDROP DUP , ,   ( pos, limit off retstack )
;


( get the iterator of the inner for-loop )
( -- i )
: FOR_I IMMEDIATE
  ' R@ ,
;


( preserve N stack contents, compiled as literals )
( x1 .. xN N -- )
: PRESERVE
  DUP 0 SWAP        ( xN N 0 N )
  FOR               ( xN N )
    DUP FOR_I - PICK
    [COMPILE] LITERAL
  ROF
  0 SWAP FOR
    DROP
  ROF
;

( everything after this point, until end-of-function, is to be
  compiled into a separate anon word, and we generate code
  that will compile a call to that anon word )
: DOES> IMMEDIATE
  HERE C@ 7 +       ( ptr to closure we're to compile )
  [COMPILE] TICKCOMMA ( generate code to call it )
  ' EXIT
  [COMPILE] TICKCOMMA ( generate code to generate exit )
  ' EXIT ,          ( end of the function we're in )
  ]
;

( create a compiler function, which results in code generation
  of a literal wherever the function appears )
( use it like this:
      20 LITERATOR TWENTY
      : SOMEFUNCTION TWENTY + ;
  and you get an inline constant of 20 in SOMEFUNCTION, no call overhead
)
: LITERATOR
  WORD HERE C@ CREATE [COMPILE] IMMEDIATE
  1 PRESERVE DOES>
  [COMPILE] LITERAL
;

( ***************************************************
  string handling.  Strings are kept in the heap as a
  length (1 cell) followed by character data and are
  NUL-terminated.
  This string code is DISGUSTING, an artefact of
  the desire to do byte-oriented manipulations in
  a system where the address granularity is 32 bits.
  *************************************************** )

( obtain length of string, in bytes/chars )
( ptr -- len )
: STRLEN
  @
;
( obtain total size of string, in cells, incl len-header )
( ptr -- size )
: STRSIZE
  @ ALIGNEDZ 1 +
;

( save the current word while building a string )
( ptr count char -- ptr count++ )
: _STRIMMSAVE 
  2 PICK 1 + CELLS       ( ptr count char cptr )
  2 PICK +               ( ptr count char cptr+count )
  !C 1 +                 ( ptr count++ )
;

( string literal in the code.  stored little-endian in heap )
( compiles a pointer-literal into the output or leaves ptr on stack )
: " IMMEDIATE
  KEY DROP      ( skip leading space )
  HERE @ 0      ( str count)
  BEGIN
    KEY DUP '"' = NOT       ( while not end of string )
  WHILE         ( str count key )
    _STRIMMSAVE ( str count++ )
  LOOP
  DROP 0        ( str count NUL )
  _STRIMMSAVE   ( str count )

  OVER !        ( str ; writes in strlen )
  DUP DUP STRSIZE ( str str strsz )
  + HERE !      ( str; *here=str+strsz )

  STATE IF
    [COMPILE] LITERAL ( generate code that pushes the string location )
  ENDIF
  ( otherwise, just leave the string ptr on the stack )

  HIDE _STRIMMSAVE
;

( extract single char from a string )
( ptr off -- char )
: [@]
  DUP 0 < IF
      2DROP         ( bounds check neg len )
      0 EXIT        ( return NUL )
  ENDIF
  OVER STRLEN       ( PTR OFF LEN )
  2DUP              ( PTR OFF LEN OFF LEN )
  >= IF             ( bounds check )
     2DROP DROP
     0 EXIT         ( return NUL )
  ENDIF
  DROP              ( ptr off )
  SWAP 1 + CELLS    ( (ptr+1)*cells off )
  + @C              ( deref )
;

( insert single char into a string )
( char ptr off -- )
: [!]
  DUP 0 < IF        ( bounds check neg len )
    DROP 2DROP    
  ELSE
    OVER STRLEN     ( CHAR PTR OFF LEN )
    OVER            ( CHAR PTR OFF LEN OFF )
    < IF            ( bounds check )
      2DROP 2DROP
    ELSE            ( CHAR PTR OFF )
      SWAP 1 + CELLS +
      !C             ( deref/write )
    ENDIF
  ENDIF
;

( copy a string/block, a word at a time )
( ptr -- newptr )
: STRDUP
  DUP STRSIZE       ( ptr size )
  DUP ALLOT         ( ptr size newptr)
  DUP -4 ROLL       ( newptr ptr size newptr )
  0 ROT             ( newptr ptr newptr 0 size )
  FOR               ( newptr ptr newptr )
    SWAP DUP @      ( newptr newptr ptr val )
    2 PICK !        ( newptr newptr ptr {*newptr=val} )
    1 + SWAP 1 +    ( newptr ptr+1 newptr+1 )
  ROF
  2DROP             ( newptr )
;

( print a string )
( ptr -- )
: TELL
  DUP
  STRLEN 0 SWAP     ( ptr 0 len )
  FOR               ( loop through length )
    DUP FOR_I [@] EMIT ( print a char)
  ROF
  DROP              ( drop the ptr)
;

( print a string literal )
: ." IMMEDIATE
  [COMPILE] "   ( get the string, either on stack or compiled )

  STATE IF
    ' TELL ,    ( gen code to print it )
  ELSE
    DUP TELL    ( print it )
    HERE !      ( discard it from the data space, i.e. move HERE back )
  ENDIF
;


( ***************************************************
  More compiler stuff that's dependent on strings
  *************************************************** )


: _CONSTBODY
    HERE C@ CREATE
    [COMPILE] LITERAL
    ' EXIT ,
;

( create a function with the specified name, that returns the value that
  was on TOS when CONSTANT was called )
( val -- )
: CONSTANT IMMEDIATE
  WORD
  STATE IF
    ( compiling... preserve the name until runtime and bring it back as literal )
    STRDUP [COMPILE] LITERAL
    ' _CONSTBODY ,
  ELSE
    ( directly running: compile a new code-object )
    _CONSTBODY
  ENDIF

  HIDE _CONSTBODY
;

( ***************************************************
  Say we're done
  *************************************************** )

." FITH Bootstrap Complete" CR