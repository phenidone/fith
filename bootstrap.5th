
: TRUE 1 ;
: FALSE 0 ;
: NOT 0 = ;

: SPACE 32 EMIT ;
: CR 10 EMIT ;

: CHAR WORD 1 + @ 0xFF & ;
: LITERAL IMMEDIATE ' LIT , , ;

: ';' [ CHAR ; ] LITERAL ;
: ':' [ CHAR : ] LITERAL ;
: '(' [ CHAR ( ] LITERAL ;
: ')' [ CHAR ) ] LITERAL ;
: '"' [ CHAR " ] LITERAL ;
: 'A' [ CHAR A ] LITERAL ;
: '0' [ CHAR 0 ] LITERAL ;
: '-' [ CHAR - ] LITERAL ;
: '.' [ CHAR . ] LITERAL ;

: [COMPILE] IMMEDIATE WORD FIND , ;

: BEGIN IMMEDIATE
  HERE @C
;

: UNTIL IMMEDIATE
  HERE @C -
  ' JZ ,
  ,
;

: IF IMMEDIATE
  ' JZ ,
  HERE @C
  0 ,
;

: ENDIF IMMEDIATE
  DUP HERE @C
  SWAP - 1 +
  SWAP !C
;

: ELSE IMMEDIATE
  ' JMP ,
  HERE @C
  0 ,
  SWAP [COMPILE] ENDIF
;

: ( IMMEDIATE
  1
  BEGIN
    KEY
    DUP '(' = IF
      SWAP 1 + SWAP
    ENDIF
    ')' = IF
      1 -
    ENDIF
    DUP NOT
  UNTIL
  DROP
;

( ***************************************************
  the above consumes nested parenthetical comments
  by consuming input and tracking left/right parens
  in a counter until they balance.
  So now we can have comments in parens!
  
  The limitation is that the first opening paren must
  be a word unto itself because it must be discovered
  by WORD inside INTERPRET, in order to call the above.
  *************************************************** )

( ***************************************************
  Stack manipulation stuff
  *************************************************** )

( x y -- x y x )
: OVER 1 PICK ;
( x y -- y x y )
: TUCK DUP -ROT ;
( x y -- y )
: NIP SWAP DROP ;

( x y -- )
: 2DROP DROP DROP ;
( x y -- x y x y )
: 2DUP OVER OVER ;
( x y a b -- a b x y )
: 2SWAP 4 ROLL 4 ROLL ;

( ***************************************************
  Compiler: function primitives
  *************************************************** )

( insert call to the function we're compiling )
: RECURSE IMMEDIATE
  LATEST FIND ,
;

( insert jump (tail recursion) to the beginning of current function )
: TAIL IMMEDIATE
  LATEST FIND 0x1FFFFFFF &
  HERE @C -                 ( compute offset )
  ' JMP ,
  ,                         ( compile jump )
;

( insert jump-IF-NONZERO to the beginning of current function )
: ?TAIL IMMEDIATE
  ' NOT ,                   ( invert TOS )
  LATEST FIND 0x1FFFFFFF &  ( recursion pointer, clear hidden/immed flags )
  HERE @C  -                ( compute offset )
  ' JZ ,
  ,                         ( compile jump )
;

( recursive factorial on stack )
( n -- n! )
: FACTORIAL
  DUP IF
    DUP 1 - RECURSE *
  ELSE
    DROP 1
  ENDIF
;

( accum n -- accum*n n-1 )
: _TAILFACTINNER
  DUP ROT *     ( n accum*n )
  SWAP 1 -      ( accum n-1 )
  DUP ?TAIL     ( tail recursion when n != 0 )
;

( tail-recursed factorial as a loop )
( n -- n! )
: TAILFACT
  1 SWAP         ( 1 n )
  _TAILFACTINNER ( n! 0 )
  DROP
;

( ***************************************************
  Compiler: flow control primitives
  *************************************************** )

( cond IF truepart [ ELSE falsepart ] ENDIF
  implements the usual selection construct )

( BEGIN body cond UNTIL
  implements do { body; } while(!cond); )

( BEGIN cond WHILE body LOOP
  implements while(cond){ body }
  because BEGIN was compiled first, we already have the
  loop target address on the stack )

: WHILE IMMEDIATE
  ' JZ ,    ( compile conditional branch )
  HERE @C   ( target &offset )
  0 ,       ( offset=0 )
;

( end of a while-loop )
( target &off -- )
: LOOP IMMEDIATE
  HERE @C       ( target &offset &jmp )
  ' JMP ,       ( compile jmp )
  ROT SWAP -    ( &offset target-&jmp )
  ,             ( &offset )
  [COMPILE] ENDIF ( patch the while-condition )
;


( beginning of a definite (do/for) loop )
( we keep both the limit and the counter on
  the return stack at runtime.  It's compiled
  (just like in C) as a while loop, and we insert
  the initialisation, condition, continuation and
  termination code here )
( runtime: start limit -- )
: FOR IMMEDIATE
  ' >R DUP , ,  ( R: limit start )
  [COMPILE] BEGIN
    ' R> ,
    ' R@ ,      ( pos limit )
    ' OVER ,
    ' >R ,      ( restore pos to return-stack )
    ' < ,       ( condition: pos<limit )
  [COMPILE] WHILE
;


( end of a FOR loop.  Install the continuation (++pos)
  code, put the loop-end in, then compile cleanup )
: ROF IMMEDIATE
  ' R> ,            ( pos from retstack )
  1 [COMPILE] LITERAL ' + ,   ( pos+1 )
  ' >R ,            ( pos to retstack )
  [COMPILE] LOOP
  ' RDROP DUP , ,   ( pos, limit off retstack )
;


( end of a FOR loop with arbitrary +=
  code, put the loop-end in, then compile cleanup )
: +ROF IMMEDIATE
  ' R> ,            ( pos from retstack )
  ' + ,             ( pos+delta )
  ' >R ,            ( pos to retstack )
  [COMPILE] LOOP
  ' RDROP DUP , ,   ( pos, limit off retstack )
;



( get the iterator of the inner for-loop )
( -- i )
: FOR_I IMMEDIATE
  ' R@ ,
;

( ***************************************************
  Heap allocator
  *************************************************** )

( allocate words on the heap and return pointer to first one )
( sz -- ptr )
: ALLOT
  HERE @ DUP    ( sz ptr ptr )
  ROT +         ( ptr ptr+sz )
  HERE !        ( ptr {*here=ptr+sz} )
;

( round up to multiple of 4 (bytes -> cells) & divide by 4)
: ALIGNED
  3 + 2 >>
;
( round up strlen, plus room for nul terminator, to a cell count )
: ALIGNEDZ
  4 + 2 >>
;

( ***************************************************
  string handling.  Strings are kept in the heap as a
  length (1 cell) followed by character data and are
  NUL-terminated.
  This string code is DISGUSTING, an artefact of
  the desire to do byte-oriented manipulations in
  a system where the address granularity is 32 bits.
  *************************************************** )

( obtain length of string, in bytes/chars )
( ptr -- len )
: STRLEN
  @
;
( obtain total size of string, in cells, incl len-header )
( ptr -- size )
: STRSIZE
  @ ALIGNEDZ 1 +
;

( calculate bit-shift distance for getting/setting chars in cells )
: BYTEOFF2BITOFF
  3 & 3 <<
;

( select one char from within a 32-bit cell, assuming little-endian )
( cell off -- char )
: SELCHAR
  BYTEOFF2BITOFF DUP ( cell bitoff bitoff )
  0xFF SWAP <<      ( cell bitoff mask )
  ROT &             ( bitoff cell&mask )
  SWAP >>
;

( save the current word while building a string )
( ptr count accum -- ptr count accum=0 )
: _STRIMMSAVE 
  2 PICK        ( ptr count accum ptr )
  !             ( ptr count )
  SWAP 1 + SWAP ( ++ptr count )
  0             ( ptr count accum=0 )
;

( append a char to a string we're building )
( ptr count accum key -- ptr count++ accum+ )
: _STRIMMBODY 
  2 PICK      ( ptr count accum key count )
  BYTEOFF2BITOFF << | ( ptr count accum )

  SWAP 1 + SWAP  ( ptr ++count accum )
  OVER 3 & 0 = IF ( installed 4th char in a word, save it )
    _STRIMMSAVE  ( ptr count accum )
  ENDIF
;

( string literal in the code.  stored little-endian in heap )
( compiles a pointer-literal into the output )
: " IMMEDIATE
  KEY DROP      ( skip leading space )
  HERE @        ( str )
  DUP 1 + 0 DUP ( str ptr count accum )
  BEGIN
    KEY DUP '"' = NOT       ( while not end of string )
  WHILE         ( str ptr count accum key )
    _STRIMMBODY ( str ptr count accum )
  LOOP
  DROP 0        ( str ptr count accum NUL )
  _STRIMMBODY   ( append NUL )

  OVER 3 & 0 > IF
    _STRIMMSAVE   ( save the last word if not done )
  ENDIF         ( str ptr count accum )
  DROP SWAP     ( str count ptr )
  HERE !        ( str count {*here=ptr} )
  OVER !        ( str {*str=count, saves length} )

  [COMPILE] LITERAL ( code that pushes the string location )
;


( extract single char from a string )
( ptr off -- char )
: [@]
  DUP 0 < IF
      2DROP         ( bounds check neg len )
      0 EXIT        ( return NUL )
  ENDIF
  OVER STRLEN       ( PTR OFF LEN )
  2DUP              ( PTR OFF LEN OFF LEN )
  >= IF             ( bounds check )
     2DROP DROP
     0 EXIT         ( return NUL )
  ENDIF
  DROP DUP 2 >>     ( PTR OFF OFF/4 )
  ROT + 1 + @       ( off str[off/4+1] )
  SWAP SELCHAR
;

( copy a string/block )
( ptr -- newptr )
: STRDUP
  DUP STRSIZE       ( ptr size )
  DUP ALLOT         ( ptr size newptr)
  DUP -4 ROLL       ( newptr ptr size newptr )
  0 ROT             ( newptr ptr newptr 0 size )
  FOR               ( newptr ptr newptr )
    SWAP DUP @      ( newptr newptr ptr val )
    2 PICK !        ( newptr newptr ptr {*newptr=val} )
    1 + SWAP 1 +    ( newptr ptr+1 newptr+1 )
  ROF
  2DROP             ( newptr )
;

( print a string )
( ptr -- )
: MYTELL
  DUP
  STRLEN 0 SWAP     ( ptr 0 len )
  FOR               ( loop through length )
    DUP FOR_I [@] EMIT ( print a char)
  ROF
  DROP              ( drop the ptr)
;
